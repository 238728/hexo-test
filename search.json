[{"title":"OI中“诈骗题”简述","path":"/2024/10/02/dpahtst/","content":"诈骗犯，带走！ 写在前面 由于是诈骗题，建议先思考一遍题目。 题目一 对于一个序列 a[l,r]a_{[l,r]}a[l,r]​，定义它的 Mex 变换 b[l,r]b_{[l,r]}b[l,r]​ 如下： 对于每一个 l≤i≤rl \\leq i \\leq rl≤i≤r，有 bi=mex({al,al+1,⋯ ,ai−1,ai+1,⋯ ,ar−1,ar})b_i=\\text{mex}(\\{a_l,a_{l+1},⋯ ,a_{i−1},a_{i+1},⋯ ,a_{r−1},a_r\\})bi​=mex({al​,al+1​,⋯ ,ai−1​,ai+1​,⋯ ,ar−1​,ar​})。 给定一个长度为 nnn 的序列 a[1,n]​a_{[1,n]}​a[1,n]​​，你每次操作可以选择一个区间，并将这个区间替换为它的 Mex 变换。 你最多可以进行 kkk 次操作，你需要最小化操作完成后序列的字典序。构造任意方案。注意：你并不需要最小化你的操作次数。 输入格式 第一行两个整数 n,kn,kn,k。 接下来一行 nnn 个整数，表示序列 a[1,n]a_{[1,n]}a[1,n]​。 输出格式 第一行输出一个整数 mmm 表示你使用的操作次数。 接下来 mmm 行，每行输出两个整数，表示你依次操作的每一个区间。 样例 输入1 124 30 1 2 3 输出1 123432 23 34 4 输入2 126 10 1 2 0 3 4 输出2 1212 3 数据范围 1≤n,k≤1051 \\leq n,k \\leq 10^51≤n,k≤105，0≤ai≤n0 \\leq a_i \\leq n0≤ai​≤n。 解答先思考：mex\\text{mex}mex 运算有什么性质？A⊂[1,+∞)∩Z,mex(A)=0A \\subset [1,+\\infty) \\cap \\mathbb{Z},\\text{mex}(A)=0A⊂[1,+∞)∩Z,mex(A)=0。人话：如果一个集合中所有数都 &gt;0&gt;0&gt;0，则这个集合的 mex\\text{mex}mex 值一定为 000。0∈A,mex(A)≥10 \\in A,\\text{mex}(A) \\geq 10∈A,mex(A)≥1。人话：如果一个集合中有 000，则这个集合的 mex\\text{mex}mex 值一定 ≥1\\geq 1≥1。此题仅仅用到以上两个性质。记 a[1,n]​a_{[1,n]}​a[1,n]​​ 中 000 的数量为 xxx。当 k=1k=1k=1 时，也就是最多只能做一次操作。当 x=0x=0x=0 时，答案为 111。对 a[1,n]a_{[1,n]}a[1,n]​ 做一次变换即可。当 x=nx=nx=n 时，答案为 000。本来数列就全零，不需要操作。其他情况下，答案为 111。记 a[1,n]​a_{[1,n]}​a[1,n]​​ 中从左到右第一个最大连续非零区间为 a[u,v]a_{[u,v]}a[u,v]​，对 a[u,v]a_{[u,v]}a[u,v]​ 做一次变换即可。其他情况下，讨论 xxx 的大小。当 x=0x=0x=0 时，答案为 111。对 a[1,n]a_{[1,n]}a[1,n]​ 做一次变换即可。当 x=1x=1x=1 时，记这一个 000 的下标为 qqq。先对 a[1,q−1]a_{[1,q-1]}a[1,q−1]​ 做一次变换，再对 a[q+1,n]a_{[q+1,n]}a[q+1,n]​ 做一次变换即可。答案为 111 或 222。当 x≥2x \\geq 2x≥2 时，答案其实是 222。具体过程是先对 a[1,n]a_{[1,n]}a[1,n]​ 做一次变换，再对 a[1,n]a_{[1,n]}a[1,n]​ 做一次变换。第一次变换会将所有数变为 ≥1\\geq 1≥1 的数，而第二次变换则会将所有数变为 000。 评价名副其实的诈骗题。题目中说”输出任意方案“让人摸不着头脑，样例中又给了奇奇怪怪的输出。第一眼会想打暴力分，可是暴力很长，一般都写不对。看了解答后才会大呼一声：”原来如此！“真是防不甚防。","tags":["OI-题目","反思"]},{"title":"洛谷 P7991 做题记录","path":"/2024/09/27/LG-P7991/","content":"P7991 [USACO21DEC] Connecting Two Barns S 思路 并查集+二分查找 以下假设点 iii 所在的连通块的点集为 GiG_iGi​。有可能存在 Gu=GvG_u=G_vGu​=Gv​。 具体做法是分类讨论： 不连边，则必须保证 G1=GnG_1=G_nG1​=Gn​。 连一条边，则在分别在 G1G_1G1​ 和 GnG_nGn​ 中找一点连边。 连两条边，则寻找一点 xxx。接着在 GxG_xGx​ 中枚举一点 yyy。将 yyy 与 G1G_1G1​ 中一点连边，再将 yyy 与 GnG_nGn​ 中一点连边。 接下来定义一个函数：cost(u,v)cost(u,v)cost(u,v)。它的操作就是在 GuG_uGu​ 中枚举一点 yyy。将 yyy 与 GvG_vGv​ 中一点连边的最小代价。 连边操作可以通过二分查找与 yyy 权值差最小的点 O(log⁡n)O(\\log{n})O(logn) 实现。 所以，上述所有情况都可归为：枚举一点 xxx，代价和就是 cost(1,x)+cost(x,n)cost(1,x)+cost(x,n)cost(1,x)+cost(x,n)。算出所有代价和，取最小值即为答案。可以这样做的具体原因请读者自行思考。 注意因为此题数据有些特殊，必须保证程序的时间复杂度是 O(nlog⁡n)O(n \\log{n})O(nlogn)。只需稍稍修改一下 cost(u,v)cost(u,v)cost(u,v) 函数，保证在较小的块中枚举，和较大的块中的点连边即可。我就是这样50分的 代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;bits/stdc++.h&gt;using namespace std;long long n,m,fa[1000005];void init()&#123;\tfor(int i=1;i&lt;=n;i++)\t&#123; fa[i]=i;\t&#125;&#125;long long find(long long x)&#123;\tif(fa[x]==x)\t&#123; return x;\t&#125;\telse\t&#123; return fa[x]=find(fa[x]);\t&#125;&#125;void merge(long long x,long long y)&#123;\tx=find(x);\ty=find(y);\tif(x!=y)\t&#123; fa[x]=y;\t&#125;&#125;long long dist(long long c,long long d)&#123;\treturn (c-d)*(c-d);&#125;vector&lt;long long&gt;dot[1000005];long long cost(long long fx,long long fy)&#123;\tif(dot[fx].size()&gt;dot[fy].size())\t&#123; swap(fx,fy);\t&#125;//不加会TLE 50pts\tlong long res=1e18;\tfor(int i=0;i&lt;dot[fx].size();i++)\t&#123; long long u=dot[fx][i]; long long bg=lower_bound(dot[fy].begin(),dot[fy].end(),u)-dot[fy].begin(); //bg=[0,dot[fy].size()] if(bg&gt;0) &#123; long long v=dot[fy][bg-1]; res=min(res,dist(u,v)); &#125; if(bg&lt;dot[fy].size()) &#123; long long v=dot[fy][bg]; res=min(res,dist(u,v)); &#125;\t&#125;\treturn res;&#125;int main()&#123;\tlong long t;\tcin&gt;&gt;t;\twhile(t--)\t&#123; cin&gt;&gt;n&gt;&gt;m; init(); for(int i=1;i&lt;=n;i++) &#123; dot[i].clear(); &#125; for(int i=1;i&lt;=m;i++) &#123; long long x,y; cin&gt;&gt;x&gt;&gt;y; merge(x,y); &#125; for(int i=1;i&lt;=n;i++) &#123; long long tmp=find(i); dot[tmp].push_back(i); &#125; long long ans=1e18; long long st=find(1),ed=find(n); for(int i=1;i&lt;=n;i++) &#123; ans=min(ans,cost(st,i)+cost(ed,i)); &#125; cout&lt;&lt;ans&lt;&lt;endl;\t&#125;\t&#125;","tags":["OI-题目"]},{"title":"关于","path":"/about/index.html","content":"About me. Under construction…"},{"path":"/custom/css/darkmode.css","content":"#Dark:root { --site-bg: #1c1e21; --card: #373d43; --block: #26292c; --block-border: #383d42; --block-hover: #2f3337; --text-p0: #fff; --text-p1: #ccc; --text-p2: #b3b3b3; --text-p3: #858585; --text-p4: #707070; --text-meta: #4d4d4d; --text-code: #ff6333; } @media screen and (max-width: 667px) { #Dark:root { --site-bg: #000; } } #Dark:root { --blur-bg: rgba(0,0,0,0.5); } #Dark .float-panel { --blur-bg: rgba(0,0,0,0.4); } #Dark .tag-plugin.tag { --theme: #ff6333; --theme-bg1: #3d1e14; --theme-bg2: #2f2522; --theme-border: #5c2d1f; --text-p0: #ffc4b3; --text-p1: #dfae9f; --text-p2: #f1997e; } #Dark .tag-plugin[color='red'] { --theme: #f44336; --theme-bg1: #3d1714; --theme-bg2: #2f2322; --theme-border: #5c231f; --text-p0: #ffb8b3; --text-p1: #dfa49f; --text-p2: #f1867e; } #Dark .tag-plugin[color='orange'] { --theme: #fa6400; --theme-bg1: #3d2514; --theme-bg2: #2f2722; --theme-border: #5c371f; --text-p0: #ffd1b3; --text-p1: #dfb99f; --text-p2: #f1ac7e; } #Dark .tag-plugin[color='yellow'] { --theme: #ffbd2b; --theme-bg1: #3d3014; --theme-bg2: #2f2b22; --theme-border: #5c491f; --text-p0: #ffe7b3; --text-p1: #dfcb9f; --text-p2: #f1cd7e; } #Dark .tag-plugin[color='green'] { --theme: #3dc550; --theme-bg1: #143d1a; --theme-bg2: #222f24; --theme-border: #1f5c27; --text-p0: #b3ffbd; --text-p1: #9fdfa8; --text-p2: #7ef18e; } #Dark .tag-plugin[color='cyan'] { --theme: #1bcdfc; --theme-bg1: #14353d; --theme-bg2: #222d2f; --theme-border: #1f4f5c; --text-p0: #b3efff; --text-p1: #9fd2df; --text-p2: #7ed9f1; } #Dark .tag-plugin[color='blue'] { --theme: #2196f3; --theme-bg1: #142b3d; --theme-bg2: #222a2f; --theme-border: #1f415c; --text-p0: #b3ddff; --text-p1: #9fc3df; --text-p2: #7ebef1; } #Dark .tag-plugin[color='purple'] { --theme: #9c27b0; --theme-bg1: #37143d; --theme-bg2: #2d222f; --theme-border: #531f5c; --text-p0: #f4b3ff; --text-p1: #d69fdf; --text-p2: #e07ef1; } #Dark .tag-plugin[color='light'] { --theme-border: #fff; --theme-bg1: #e0e0e0; --theme-bg2: #fff; --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .tag-plugin[color='dark'] { --theme-border: #000; --theme-bg1: #1f1f1f; --theme-bg2: #111; --text-p0: #fff; --text-p1: #fff; --text-p2: #e0e0e0; --text-p3: #ddd; --text-code: #fff; } #Dark .tag-plugin[color='warning'], #Dark .tag-plugin[color='light'] { --text-p0: #000; --text-p1: #111; --text-p2: #1f1f1f; --text-p3: #555; --text-code: #fff; } #Dark .social-wrap a.social:hover { box-shadow: none; }"},{"path":"/custom/css/maincusto.css","content":"/* 文章内链接：为链接使用荧光笔下划线效果 */ li:not([class]) a:not([class]), p:not([class]) a:not([class]), table a:not([class]) { padding-bottom: 0.1rem; background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%; }"},{"path":"/custom/js/darkmode.js","content":"/** * 监听系统主题 * @type {MediaQueryList} */ var OSTheme = window.matchMedia('(prefers-color-scheme: dark)'); OSTheme.addListener(e => { if (window.localStorage.getItem('Theme_Mode') === 'auto') { ThemeChange('auto'); } }) /** * 自动模式 6:00-18:00-Light 18:00-6:00-Dark,开启后每三十分钟检查一次 */ const AutoMode = (htmlElement) => { var date = new Date(); var hours = date.getHours(); if (hours < 18 && hours >= 6) { document.querySelector(\"html\").id = \"Light\"; } else { document.querySelector(\"html\").id = \"Dark\"; } // if (htmlElement.id === \"Light\") { // 闪瞎你的眼模式（速度快一点的话） // htmlElement.id = \"Dark\"; // } else { htmlElement.id = \"Light\"; } } let autoTimer; /** * 修改博客主题 * @param theme 亮为light,暗为dark,自动为auto * @constructor */ const ThemeChange = (theme) => { // 清除计时器 clearInterval(autoTimer); // 抽取元素 const htmlElement = document.querySelector(\"html\"); let themeBtnIcon; try { themeBtnIcon = document.querySelector(\"#start > aside > footer > div > a:nth-child(3) > i\") } catch { // 元素不存在 } if (theme === 'light' || (theme === 'auto' && !OSTheme.matches)) { htmlElement.id = \"Light\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-sun'; } } else { htmlElement.id = \"Dark\"; if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-moon'; } } if (theme === 'auto') { if (themeBtnIcon) { themeBtnIcon.className = 'fa-solid fa-circle-half-stroke'; } AutoMode(htmlElement); autoTimer = setInterval(function () { AutoMode(htmlElement); }, 1000 * 60 * 30); // 半小时一次 } window.localStorage.setItem('Theme_Mode', theme); } /** * 初始化博客主题 */ switch (window.localStorage.getItem('Theme_Mode')) { case 'light': ThemeChange('light'); break; case 'dark': ThemeChange('dark'); break; default: ThemeChange('auto'); } /** * 切换主题模式 */ // 绑定按钮点击事件 try { document.querySelector(\"#start > aside > footer > div > a:nth-child(3)\").onclick = () => { console.log('Button has been clicked!'); if (window.localStorage.getItem('Theme_Mode') === 'auto') { hud.toast('白天模式'); ThemeChange('light'); } else if (window.localStorage.getItem('Theme_Mode') === 'light') { hud.toast('夜间模式'); ThemeChange('dark'); } else { hud.toast('自动模式'); ThemeChange('auto'); } } } catch { // 元素不存在 }"},{"path":"/custom/js/random.js","content":"hexo.extend.filter.register('after_render:html', function (data) { const posts = [] hexo.locals.get('posts').map(function (post) { if (post.random !== false) posts.push(post.path) }) data += `var posts=${JSON.stringify(posts)};function toRandomPost(){ window.pjax ? pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]) : window.open('/'+posts[Math.floor(Math.random()*posts.length)], \"_self\"); };` return data })"},{"path":"/custom/css/twcusto.css","content":"/* ========================twikoo美化====================== */ /* 下面表情和按钮那一栏的设置 */ #twikoo .tk-comments .tk-submit .tk-row.actions{ margin-bottom: 0; margin-left: 0; } /* 个人信息和文本输入之间的空位置 */ .tk-main .tk-submit .tk-col .tk-meta-input, #twikoo .tk-comments .tk-submit .tk-col .tk-meta-input{ margin-bottom: 16px; } /* 直接固定高度，解决提交按钮有时高度不起作用的问题 */ .tk-row.actions button.el-button { height: 32px; } /* 解决图片大小超出范围问题 */ .tk-main .tk-content img { max-width: 100%; height: auto; } /* 圆角设置 */ .tk-meta-input input { border-top-right-radius: 12px; border-bottom-right-radius: 12px; } .tk-meta-input div { border-top-left-radius: 12px; border-bottom-left-radius: 12px; } /* 输入框样式 */ .tk-input.el-textarea textarea { border-radius: 12px; min-height: 150px !important; height: auto; } /* 宽度太窄的时候去掉预览按钮 */ @media screen and (max-width:420px) { .tk-main .tk-submit .tk-row.actions button.el-button.tk-preview.el-button--default.el-button--small{ display: none; } } :root { --liushen-radius: 12px; --liushen-card-border-width: 0px; } /* 浅色模式颜色 */ [data-theme=light] { --liushen-border-color: #e3e8f7; --liushen-card-bg: #fff; --liushen-card-border: #e3e8f7; --style-border-always: 1px solid var(--liushen-card-border); --liushen-blue: #425AEF; } /* 深色模式颜色 */ [data-theme=dark] { --liushen-border-color: #42444a; --liushen-card-bg: #2c2c2c; --liushen-card-border: #42444a; --style-border-always: 1px solid var(--liushen-card-border); --liushen-blue: #0084FF; } /* 评论区评论大框 */ .twikoo .tk-comments-container>.tk-comment, .twikoo .tk-comments .tk-submit { /* 内边距 */ padding: 20px; margin-top: 0px; margin-bottom: 20px; /* 圆角 */ border-radius: var(--liushen-radius); /* 背景颜色 */ background: var(--liushen-card-bg); /* 变动动画时长 */ transition: .3s; } /* 浅色模式评论区评论大框 */ [data-theme=light] .twikoo .tk-comments-container>.tk-comment, .twikoo .tk-comments .tk-submit { /* 阴影 */ box-shadow: var(--card-box-shadow); } /* 浅色模式评论区评论大框阴影悬浮加深 */ [data-theme=light] .twikoo .tk-comments-container>.tk-comment:hover, .twikoo .tk-comments .tk-submit:hover { /* 阴影（浅色模式突出层次感） */ box-shadow: var(--card-hover-box-shadow); } /* 黑暗模式评论区评论大框 */ [data-theme=dark] .twikoo .tk-comments-container>.tk-comment, .twikoo .tk-comments .tk-submit { /* 边框样式 */ border-style: solid; /* 边框宽度 */ border-width: var(--liushen-card-border-width); /* 边框颜色 */ border-color: var(--liushen-card-border); } /* 设备信息 */ .twikoo .tk-extra { /* 圆角 */ border-radius: var(--liushen-radius); /* 背景颜色 */ background: var(--liushen-card-bg); /* 内边距 */ padding: 0.4rem; /* 底边距 */ margin-bottom: 1rem; /* 变动动画时长 */ transition: .3s; } /* 浅色模式设备信息 */ [data-theme=light] .twikoo .tk-extra { /* 阴影 */ box-shadow: var(--card-box-shadow); } /* 浅色模式设备信息阴影悬浮加深 */ [data-theme=light] .twikoo .tk-extra:hover { /* 阴影 */ box-shadow: var(--card-hover-box-shadow); } /* 黑暗模式设备信息 */ [data-theme=dark] .twikoo .tk-extra { /* 边框样式 */ border-style: solid; /* 边框宽度 */ border-width: var(--liushen-card-border-width); /* 边框颜色 */ border-color: var(--liushen-card-border); } /* 加载更多按钮 */ .twikoo .tk-expand { /* 圆角 */ border-radius: var(--liushen-radius); } /* 浅色模式加载更多按钮 */ [data-theme=light] .twikoo .tk-expand { /* 阴影 */ box-shadow: var(--card-box-shadow); } /* 浅色模式加载更多按钮（鼠标悬浮时） */ [data-theme=light] .twikoo .tk-expand:hover { /* 阴影 */ box-shadow: var(--card-hover-box-shadow); /* 背景颜色 */ background-color: var(--btn-bg); } /* 黑暗模式加载更多按钮（鼠标悬浮时） */ [data-theme=dark] .twikoo .tk-expand:hover { /* 背景颜色 */ background-color: var(--liushen-blue); } /* 黑暗模式加载更多按钮 */ [data-theme=dark] .twikoo .tk-expand { /* 边框样式 */ border-style: solid; /* 边框宽度 */ border-width: var(--liushen-card-border-width); /* 边框颜色 */ border-color: var(--liushen-card-border); } /* 分类卡片移动端个人信息卡片只显示两个 */ @media screen and (max-width:570px) { .tk-main .tk-extras { display: none; } } /* 评论区按钮样式 */ .tk-row.actions button.el-button { border-radius: 12px !important; } /* 由于twikoo内部函数不宜修改，为了合适，去掉弹窗中的刷新按钮，该部分不需要，这是为了适配右键回复弹窗的内容的 #popup #twikoo .tk-comments .tk-comments-container .tk-comments-title > span:nth-child(2) > span:nth-child(1) { display: none; } */ /* ========================twikoo美化====================== */"}]